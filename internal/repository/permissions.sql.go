// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: permissions.sql

package repository

import (
	"context"

	"github.com/google/uuid"
)

const assignRolePermission = `-- name: AssignRolePermission :one
INSERT INTO role_permissions (
  role_id, permission_id
) VALUES ( $1, $2 )
RETURNING role_id, permission_id
`

type AssignRolePermissionParams struct {
	RoleID       uuid.UUID `json:"role_id"`
	PermissionID uuid.UUID `json:"permission_id"`
}

// Assigns a permission to a role
func (q *Queries) AssignRolePermission(ctx context.Context, arg AssignRolePermissionParams) (RolePermission, error) {
	row := q.db.QueryRow(ctx, assignRolePermission, arg.RoleID, arg.PermissionID)
	var i RolePermission
	err := row.Scan(&i.RoleID, &i.PermissionID)
	return i, err
}

const createPermission = `-- name: CreatePermission :one
INSERT INTO permissions (
  name, description
) VALUES ( $1, $2 )
RETURNING id, name, description, created_at, updated_at
`

type CreatePermissionParams struct {
	Name        string  `json:"name"`
	Description *string `json:"description"`
}

// Creates a permission on the database
func (q *Queries) CreatePermission(ctx context.Context, arg CreatePermissionParams) (Permission, error) {
	row := q.db.QueryRow(ctx, createPermission, arg.Name, arg.Description)
	var i Permission
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getAllPermissions = `-- name: GetAllPermissions :many
SELECT id, name, description, created_at, updated_at FROM permissions
LIMIT $1
OFFSET $2
`

type GetAllPermissionsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetAllPermissions(ctx context.Context, arg GetAllPermissionsParams) ([]Permission, error) {
	rows, err := q.db.Query(ctx, getAllPermissions, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Permission{}
	for rows.Next() {
		var i Permission
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPermissionByID = `-- name: GetPermissionByID :many
SELECT id, name, description, created_at, updated_at FROM permissions
WHERE id = $1
`

func (q *Queries) GetPermissionByID(ctx context.Context, id uuid.UUID) ([]Permission, error) {
	rows, err := q.db.Query(ctx, getPermissionByID, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Permission{}
	for rows.Next() {
		var i Permission
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserPermissionNames = `-- name: GetUserPermissionNames :many
SELECT permission FROM user_permissions_view
WHERE user_id = $1
`

// Returns all permission names that have been granted to a user
func (q *Queries) GetUserPermissionNames(ctx context.Context, userID uuid.UUID) ([]string, error) {
	rows, err := q.db.Query(ctx, getUserPermissionNames, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []string{}
	for rows.Next() {
		var permission string
		if err := rows.Scan(&permission); err != nil {
			return nil, err
		}
		items = append(items, permission)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserPermissions = `-- name: GetUserPermissions :many
SELECT user_id, role_id, role_name, permission_id, permission FROM user_permissions_view
WHERE user_id = $1
`

// Returns all permissions associated to a user
func (q *Queries) GetUserPermissions(ctx context.Context, userID uuid.UUID) ([]UserPermissionsView, error) {
	rows, err := q.db.Query(ctx, getUserPermissions, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []UserPermissionsView{}
	for rows.Next() {
		var i UserPermissionsView
		if err := rows.Scan(
			&i.UserID,
			&i.RoleID,
			&i.RoleName,
			&i.PermissionID,
			&i.Permission,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const revokeRolePermission = `-- name: RevokeRolePermission :exec
DELETE FROM role_permissions
WHERE role_id = $1 AND permission_id = $2
`

type RevokeRolePermissionParams struct {
	RoleID       uuid.UUID `json:"role_id"`
	PermissionID uuid.UUID `json:"permission_id"`
}

// Revokes a permission from a role
func (q *Queries) RevokeRolePermission(ctx context.Context, arg RevokeRolePermissionParams) error {
	_, err := q.db.Exec(ctx, revokeRolePermission, arg.RoleID, arg.PermissionID)
	return err
}

const updatePermission = `-- name: UpdatePermission :one
UPDATE permissions
  SET name = COALESCE($2, name),
  description = COALESCE($3, description),
  updated_at = NOW()
  WHERE id = $1
RETURNING id, name, description, created_at, updated_at
`

type UpdatePermissionParams struct {
	ID          uuid.UUID `json:"id"`
	Name        string    `json:"name"`
	Description *string   `json:"description"`
}

func (q *Queries) UpdatePermission(ctx context.Context, arg UpdatePermissionParams) (Permission, error) {
	row := q.db.QueryRow(ctx, updatePermission, arg.ID, arg.Name, arg.Description)
	var i Permission
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
