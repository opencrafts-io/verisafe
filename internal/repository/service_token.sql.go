// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: service_token.sql

package repository

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createServiceToken = `-- name: CreateServiceToken :one
INSERT INTO service_tokens (
  account_id, name, token_hash, expires_at
) VALUES (
  $1, $2, $3, $4
)
RETURNING id, account_id, name, token_hash, created_at, last_used_at, expires_at, rotated_at, revoked_at
`

type CreateServiceTokenParams struct {
	AccountID uuid.UUID `json:"account_id"`
	Name      string    `json:"name"`
	TokenHash string    `json:"token_hash"`
	ExpiresAt time.Time `json:"expires_at"`
}

func (q *Queries) CreateServiceToken(ctx context.Context, arg CreateServiceTokenParams) (ServiceToken, error) {
	row := q.db.QueryRow(ctx, createServiceToken,
		arg.AccountID,
		arg.Name,
		arg.TokenHash,
		arg.ExpiresAt,
	)
	var i ServiceToken
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.Name,
		&i.TokenHash,
		&i.CreatedAt,
		&i.LastUsedAt,
		&i.ExpiresAt,
		&i.RotatedAt,
		&i.RevokedAt,
	)
	return i, err
}

const deleteServiceToken = `-- name: DeleteServiceToken :exec
DELETE FROM service_tokens
WHERE id = $1
`

func (q *Queries) DeleteServiceToken(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteServiceToken, id)
	return err
}

const getServiceTokenByHash = `-- name: GetServiceTokenByHash :one
SELECT id, account_id, name, token_hash, created_at, last_used_at, expires_at, rotated_at, revoked_at FROM service_tokens
WHERE token_hash = $1
  AND revoked_at IS NULL
  AND (expires_at IS NULL OR expires_at > NOW())
`

func (q *Queries) GetServiceTokenByHash(ctx context.Context, tokenHash string) (ServiceToken, error) {
	row := q.db.QueryRow(ctx, getServiceTokenByHash, tokenHash)
	var i ServiceToken
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.Name,
		&i.TokenHash,
		&i.CreatedAt,
		&i.LastUsedAt,
		&i.ExpiresAt,
		&i.RotatedAt,
		&i.RevokedAt,
	)
	return i, err
}

const listServiceTokensByAccount = `-- name: ListServiceTokensByAccount :many
SELECT id, account_id, name, token_hash, created_at, last_used_at, expires_at, rotated_at, revoked_at FROM service_tokens
WHERE account_id = $1
ORDER BY created_at DESC
`

func (q *Queries) ListServiceTokensByAccount(ctx context.Context, accountID uuid.UUID) ([]ServiceToken, error) {
	rows, err := q.db.Query(ctx, listServiceTokensByAccount, accountID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ServiceToken{}
	for rows.Next() {
		var i ServiceToken
		if err := rows.Scan(
			&i.ID,
			&i.AccountID,
			&i.Name,
			&i.TokenHash,
			&i.CreatedAt,
			&i.LastUsedAt,
			&i.ExpiresAt,
			&i.RotatedAt,
			&i.RevokedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const revokeServiceToken = `-- name: RevokeServiceToken :exec
UPDATE service_tokens
SET revoked_at = NOW()
WHERE id = $1
`

func (q *Queries) RevokeServiceToken(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, revokeServiceToken, id)
	return err
}

const rotateServiceToken = `-- name: RotateServiceToken :exec
UPDATE service_tokens
SET
  token_hash = $2,
  rotated_at = NOW(),
  created_at = NOW(),
  expires_at = $3,
  last_used_at = NULL
WHERE id = $1
`

type RotateServiceTokenParams struct {
	ID        uuid.UUID `json:"id"`
	TokenHash string    `json:"token_hash"`
	ExpiresAt time.Time `json:"expires_at"`
}

func (q *Queries) RotateServiceToken(ctx context.Context, arg RotateServiceTokenParams) error {
	_, err := q.db.Exec(ctx, rotateServiceToken, arg.ID, arg.TokenHash, arg.ExpiresAt)
	return err
}

const updateServiceTokenLastUsed = `-- name: UpdateServiceTokenLastUsed :exec
UPDATE service_tokens
SET last_used_at = NOW()
WHERE id = $1
`

func (q *Queries) UpdateServiceTokenLastUsed(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, updateServiceTokenLastUsed, id)
	return err
}
