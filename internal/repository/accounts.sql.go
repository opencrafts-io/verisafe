// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: accounts.sql

package repository

import (
	"context"

	"github.com/google/uuid"
)

const createAccount = `-- name: CreateAccount :one
INSERT INTO accounts (email, name, type)
VALUES ($1, $2, $3)
RETURNING id, email, name, created_at, updated_at, terms_accepted, onboarded, type
`

type CreateAccountParams struct {
	Email string      `json:"email"`
	Name  string      `json:"name"`
	Type  AccountType `json:"type"`
}

func (q *Queries) CreateAccount(ctx context.Context, arg CreateAccountParams) (Account, error) {
	row := q.db.QueryRow(ctx, createAccount, arg.Email, arg.Name, arg.Type)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.TermsAccepted,
		&i.Onboarded,
		&i.Type,
	)
	return i, err
}

const getAccountByEmail = `-- name: GetAccountByEmail :one
SELECT id, email, name, created_at, updated_at, terms_accepted, onboarded, type FROM accounts 
WHERE lower(email) = lower($1)
LIMIT 1
`

func (q *Queries) GetAccountByEmail(ctx context.Context, lower string) (Account, error) {
	row := q.db.QueryRow(ctx, getAccountByEmail, lower)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.TermsAccepted,
		&i.Onboarded,
		&i.Type,
	)
	return i, err
}

const getAccountByID = `-- name: GetAccountByID :one
SELECT id, email, name, created_at, updated_at, terms_accepted, onboarded, type FROM accounts 
WHERE id = $1
`

func (q *Queries) GetAccountByID(ctx context.Context, id uuid.UUID) (Account, error) {
	row := q.db.QueryRow(ctx, getAccountByID, id)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.TermsAccepted,
		&i.Onboarded,
		&i.Type,
	)
	return i, err
}

const getAllAccounts = `-- name: GetAllAccounts :many
SELECT id, email, name, created_at, updated_at, terms_accepted, onboarded, type FROM accounts 
LIMIT $1
OFFSET $2
`

type GetAllAccountsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetAllAccounts(ctx context.Context, arg GetAllAccountsParams) ([]Account, error) {
	rows, err := q.db.Query(ctx, getAllAccounts, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Account{}
	for rows.Next() {
		var i Account
		if err := rows.Scan(
			&i.ID,
			&i.Email,
			&i.Name,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.TermsAccepted,
			&i.Onboarded,
			&i.Type,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const searchAccountByEmail = `-- name: SearchAccountByEmail :many
SELECT id, email, name, created_at, updated_at, terms_accepted, onboarded, type FROM accounts 
WHERE lower(email) LIKE '%' || lower($1) || '%'
LIMIT $1
OFFSET $2
`

type SearchAccountByEmailParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) SearchAccountByEmail(ctx context.Context, arg SearchAccountByEmailParams) ([]Account, error) {
	rows, err := q.db.Query(ctx, searchAccountByEmail, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Account{}
	for rows.Next() {
		var i Account
		if err := rows.Scan(
			&i.ID,
			&i.Email,
			&i.Name,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.TermsAccepted,
			&i.Onboarded,
			&i.Type,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const searchAccountByName = `-- name: SearchAccountByName :many
SELECT id, email, name, created_at, updated_at, terms_accepted, onboarded, type FROM accounts 
WHERE lower(name) LIKE '%' || lower($1) || '%'
LIMIT $2
OFFSET $3
`

type SearchAccountByNameParams struct {
	Lower  string `json:"lower"`
	Limit  int32  `json:"limit"`
	Offset int32  `json:"offset"`
}

func (q *Queries) SearchAccountByName(ctx context.Context, arg SearchAccountByNameParams) ([]Account, error) {
	rows, err := q.db.Query(ctx, searchAccountByName, arg.Lower, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Account{}
	for rows.Next() {
		var i Account
		if err := rows.Scan(
			&i.ID,
			&i.Email,
			&i.Name,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.TermsAccepted,
			&i.Onboarded,
			&i.Type,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
