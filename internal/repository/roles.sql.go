// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: roles.sql

package repository

import (
	"context"

	"github.com/google/uuid"
)

const createRole = `-- name: CreateRole :one
INSERT INTO roles ( 
  name, description
) VALUES ( $1, $2 )
RETURNING id, name, description, created_at, updated_at
`

type CreateRoleParams struct {
	Name        string  `json:"name"`
	Description *string `json:"description"`
}

// Creates a role
func (q *Queries) CreateRole(ctx context.Context, arg CreateRoleParams) (Role, error) {
	row := q.db.QueryRow(ctx, createRole, arg.Name, arg.Description)
	var i Role
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getAllRoles = `-- name: GetAllRoles :many
SELECT id, name, description, created_at, updated_at FROM roles 
LIMIT $1
OFFSET $2
`

type GetAllRolesParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

// Retrieves a list of roles
func (q *Queries) GetAllRoles(ctx context.Context, arg GetAllRolesParams) ([]Role, error) {
	rows, err := q.db.Query(ctx, getAllRoles, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Role{}
	for rows.Next() {
		var i Role
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllUserRoles = `-- name: GetAllUserRoles :many
SELECT user_id, role_id FROM user_roles WHERE user_id = $1
`

// Retrieves all roles that a user has
func (q *Queries) GetAllUserRoles(ctx context.Context, userID uuid.UUID) ([]UserRole, error) {
	rows, err := q.db.Query(ctx, getAllUserRoles, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []UserRole{}
	for rows.Next() {
		var i UserRole
		if err := rows.Scan(&i.UserID, &i.RoleID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRoleByID = `-- name: GetRoleByID :one
SELECT id, name, description, created_at, updated_at FROM roles WHERE id = $1
`

// Retrieves a role specified by its id
func (q *Queries) GetRoleByID(ctx context.Context, id uuid.UUID) (Role, error) {
	row := q.db.QueryRow(ctx, getRoleByID, id)
	var i Role
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getRolePermissions = `-- name: GetRolePermissions :many
SELECT role_id, permission_id FROM role_permissions
WHERE role_id = $1
`

// Retrieves all permissions that a re assigned to a role
func (q *Queries) GetRolePermissions(ctx context.Context, roleID uuid.UUID) ([]RolePermission, error) {
	rows, err := q.db.Query(ctx, getRolePermissions, roleID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []RolePermission{}
	for rows.Next() {
		var i RolePermission
		if err := rows.Scan(&i.RoleID, &i.PermissionID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateRole = `-- name: UpdateRole :one
UPDATE roles
  SET name =  COALESCE($2, name),
  description = COALESCE($3, description)
  WHERE id = $1
RETURNING id, name, description, created_at, updated_at
`

type UpdateRoleParams struct {
	ID          uuid.UUID `json:"id"`
	Name        string    `json:"name"`
	Description *string   `json:"description"`
}

func (q *Queries) UpdateRole(ctx context.Context, arg UpdateRoleParams) (Role, error) {
	row := q.db.QueryRow(ctx, updateRole, arg.ID, arg.Name, arg.Description)
	var i Role
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
